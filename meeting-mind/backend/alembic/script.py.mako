"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

Migration Type: ${context.get("migration_type", "schema_change")}
Database Impact: ${context.get("database_impact", "low")}
Rollback Safe: ${context.get("rollback_safe", "yes")}

Description:
${context.get("description", "Automated migration generated by Alembic")}

Performance Notes:
${context.get("performance_notes", "No significant performance impact expected")}
"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    """
    Apply the migration changes
    
    This function contains the SQL commands to upgrade the database
    schema from the previous revision to this revision.
    """
    ${upgrades if upgrades else "pass"}


def downgrade():
    """
    Revert the migration changes
    
    This function contains the SQL commands to downgrade the database
    schema from this revision to the previous revision.
    
    WARNING: Downgrade operations may result in data loss.
    Always backup your database before running downgrades.
    """
    ${downgrades if downgrades else "pass"}


def data_migration():
    """
    Perform any data migrations required for this schema change
    
    This function is called after the schema upgrade and should contain
    any data transformation logic needed for the new schema.
    """
    # Example data migration pattern:
    # connection = op.get_bind()
    # connection.execute(text("UPDATE table SET new_column = 'default_value'"))
    pass


def verify_migration():
    """
    Verify the migration was applied correctly
    
    This function performs validation checks to ensure the migration
    completed successfully and the database is in the expected state.
    """
    # Example verification pattern:
    # connection = op.get_bind()
    # result = connection.execute(text("SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'new_table'"))
    # assert result.scalar() == 1, "Expected table was not created"
    pass